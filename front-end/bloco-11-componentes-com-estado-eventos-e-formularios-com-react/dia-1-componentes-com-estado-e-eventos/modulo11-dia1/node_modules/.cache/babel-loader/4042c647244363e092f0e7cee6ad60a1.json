{"ast":null,"code":"var _jsxFileName = \"/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js\";\nimport React from 'react';\nimport './App.css';\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n\n/* function handleClick() {\n  console.log('Clicou no botão!')\n}\nfunction handleClick1() {\n  console.log('Clicou no botão 1!')\n}\nfunction handleClick2() {\n  console.log('Clicou no botão 2!')\n}\n\nclass App extends React.Component {\n  Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}`\n  render() {\n    return (\n    <div>\n      <button onClick={handleClick}>Meu botão</button>\n      <button onClick={handleClick1}>Meu botão1</button>\n      <button onClick={handleClick2}>Meu botão2</button>\n    </div>\n    )}\n}\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = () => {\n      /* Passando uma callback à função setState, que recebe de parâmetros\n      o estado anterior e as props do componente, você garante que as atualizações\n      do estado acontecerão uma depois da outra! */\n      this.setState((estadoAnterior, _props) => ({\n        numeroDeCliques: estadoAnterior.numeroDeCliques + 1\n      }));\n    };\n\n    this.state = {\n      numeroDeCliques: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleClick,\n      children: this.state.numeroDeCliques\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js"],"names":["React","App","Component","constructor","handleClick","setState","estadoAnterior","_props","numeroDeCliques","state","bind","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAQdC,WARc,GAQA,MAAM;AAClB;AACJ;AACA;AACI,WAAKC,QAAL,CAAc,CAACC,cAAD,EAAiBC,MAAjB,MAA6B;AACzCC,QAAAA,eAAe,EAAEF,cAAc,CAACE,eAAf,GAAiC;AADT,OAA7B,CAAd;AAGD,KAfa;;AAEZ,SAAKC,KAAL,GAAa;AACXD,MAAAA,eAAe,EAAE;AADN,KAAb;AAGA,SAAKJ,WAAL,GAAmB,KAAKA,WAAL,CAAiBM,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAWDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,OAAO,EAAE,KAAKP,WAAtB;AAAA,gBAAoC,KAAKK,KAAL,CAAWD;AAA/C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AApB+B;;AAwBlC,eAAeP,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n/* function handleClick() {\n  console.log('Clicou no botão!')\n}\nfunction handleClick1() {\n  console.log('Clicou no botão 1!')\n}\nfunction handleClick2() {\n  console.log('Clicou no botão 2!')\n}\n\nclass App extends React.Component {\n  Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}`\n  render() {\n    return (\n    <div>\n      <button onClick={handleClick}>Meu botão</button>\n      <button onClick={handleClick1}>Meu botão1</button>\n      <button onClick={handleClick2}>Meu botão2</button>\n    </div>\n    )}\n}\n */\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      numeroDeCliques: 0\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = () => {\n    /* Passando uma callback à função setState, que recebe de parâmetros\n    o estado anterior e as props do componente, você garante que as atualizações\n    do estado acontecerão uma depois da outra! */\n    this.setState((estadoAnterior, _props) => ({\n      numeroDeCliques: estadoAnterior.numeroDeCliques + 1\n    }))\n  }\n\n  render() {\n    return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>\n  }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}