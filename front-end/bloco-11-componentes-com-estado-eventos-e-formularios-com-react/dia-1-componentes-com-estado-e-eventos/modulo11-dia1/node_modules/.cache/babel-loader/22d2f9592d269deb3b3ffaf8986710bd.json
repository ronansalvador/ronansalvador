{"ast":null,"code":"var _jsxFileName = \"/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js\";\nimport React from 'react';\nimport './App.css';\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction handleClick() {\n  console.log('Clicou no botão!');\n}\n\nfunction handleClick1() {\n  console.log('Clicou no botão 1!');\n}\n\nfunction handleClick2() {\n  console.log('Clicou no botão 2!');\n}\n\nclass App extends React.Component {\n  /* Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}` */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Meu bot\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick1,\n        children: \"Meu bot\\xE3o1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick2,\n        children: \"Meu bot\\xE3o2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js"],"names":["React","handleClick","console","log","handleClick1","handleClick2","App","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA;AACA;AACA;AACA;;;;AACA,SAASC,WAAT,GAAuB;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;;AACD,SAASC,YAAT,GAAwB;AACtBF,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AACD,SAASE,YAAT,GAAwB;AACtBH,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AAED,MAAMG,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAChC;AACF;AACA;AACEC,EAAAA,MAAM,GAAG;AACP,wBACA;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEP,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAME;;AAX4B;;AAclC,eAAeC,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\nfunction handleClick() {\n  console.log('Clicou no botão!')\n}\nfunction handleClick1() {\n  console.log('Clicou no botão 1!')\n}\nfunction handleClick2() {\n  console.log('Clicou no botão 2!')\n}\n\nclass App extends React.Component {\n  /* Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}` */\n  render() {\n    return (\n    <div>\n      <button onClick={handleClick}>Meu botão</button>\n      <button onClick={handleClick1}>Meu botão1</button>\n      <button onClick={handleClick2}>Meu botão2</button>\n    </div>\n    )}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}