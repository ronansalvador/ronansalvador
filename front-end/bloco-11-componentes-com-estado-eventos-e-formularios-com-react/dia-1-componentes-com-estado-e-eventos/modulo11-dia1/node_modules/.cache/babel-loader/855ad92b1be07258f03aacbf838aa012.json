{"ast":null,"code":"var _jsxFileName = \"/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js\";\nimport React from 'react';\nimport './App.css';\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n\n/* function handleClick() {\n  console.log('Clicou no botão!')\n}\nfunction handleClick1() {\n  console.log('Clicou no botão 1!')\n}\nfunction handleClick2() {\n  console.log('Clicou no botão 2!')\n}\n\nclass App extends React.Component {\n  Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}`\n  render() {\n    return (\n    <div>\n      <button onClick={handleClick}>Meu botão</button>\n      <button onClick={handleClick1}>Meu botão1</button>\n      <button onClick={handleClick2}>Meu botão2</button>\n    </div>\n    )}\n}\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(); // A função abaixo vincula \"manualmente\" o `this` à nossa função\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n    Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n    e tudo o mais daqui de dentro */\n    console.log(this);\n    console.log('Clicou!');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleClick,\n      children: \"Meu bot\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js"],"names":["React","App","Component","constructor","handleClick","bind","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ,YADY,CAEZ;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,GAAG;AACZ;AACJ;AACA;AACIE,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,OAAO,EAAE,KAAKJ,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAjB+B;;AAoBlC,eAAeH,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n/* function handleClick() {\n  console.log('Clicou no botão!')\n}\nfunction handleClick1() {\n  console.log('Clicou no botão 1!')\n}\nfunction handleClick2() {\n  console.log('Clicou no botão 2!')\n}\n\nclass App extends React.Component {\n  Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}`\n  render() {\n    return (\n    <div>\n      <button onClick={handleClick}>Meu botão</button>\n      <button onClick={handleClick1}>Meu botão1</button>\n      <button onClick={handleClick2}>Meu botão2</button>\n    </div>\n    )}\n}\n */\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    // A função abaixo vincula \"manualmente\" o `this` à nossa função\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n    Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n    e tudo o mais daqui de dentro */\n    console.log(this)\n    console.log('Clicou!')\n  }\n\n  render() {\n    return <button onClick={this.handleClick}>Meu botão</button>\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}