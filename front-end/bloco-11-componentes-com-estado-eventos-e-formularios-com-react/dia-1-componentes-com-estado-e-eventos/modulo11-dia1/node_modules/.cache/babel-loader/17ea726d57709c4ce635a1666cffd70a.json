{"ast":null,"code":"var _jsxFileName = \"/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js\";\nimport React from 'react';\nimport './App.css';\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n\n/* function handleClick() {\n  console.log('Clicou no botão!')\n}\nfunction handleClick1() {\n  console.log('Clicou no botão 1!')\n}\nfunction handleClick2() {\n  console.log('Clicou no botão 2!')\n}\n\nclass App extends React.Component {\n  Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}`\n  render() {\n    return (\n    <div>\n      <button onClick={handleClick}>Meu botão</button>\n      <button onClick={handleClick1}>Meu botão1</button>\n      <button onClick={handleClick2}>Meu botão2</button>\n    </div>\n    )}\n}\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  handleClick() {\n    console.log('Clicou!');\n  }\n\n  render() {\n    /* No React, precisamos dizer explicitamente que queremos uma função da nossa classe\n    através da sintaxe `this.minhaFuncao` para usá-la num evento */\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: this.handleClick,\n      children: \"Meu bot\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ronan/trybe-exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/modulo11-dia1/src/App.js"],"names":["React","App","Component","handleClick","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACJ;AACI,wBAAO;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKH,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAT+B;;AAYlC,eAAeF,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n/* function handleClick() {\n  console.log('Clicou no botão!')\n}\nfunction handleClick1() {\n  console.log('Clicou no botão 1!')\n}\nfunction handleClick2() {\n  console.log('Clicou no botão 2!')\n}\n\nclass App extends React.Component {\n  Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}`\n  render() {\n    return (\n    <div>\n      <button onClick={handleClick}>Meu botão</button>\n      <button onClick={handleClick1}>Meu botão1</button>\n      <button onClick={handleClick2}>Meu botão2</button>\n    </div>\n    )}\n}\n */\n\nclass App extends React.Component {\n  handleClick() {\n    console.log('Clicou!')\n  }\n\n  render() {\n    /* No React, precisamos dizer explicitamente que queremos uma função da nossa classe\n    através da sintaxe `this.minhaFuncao` para usá-la num evento */\n    return <button type=\"button\" onClick={this.handleClick}>Meu botão</button>;\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}